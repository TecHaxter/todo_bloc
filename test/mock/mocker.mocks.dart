// Mocks generated by Mockito 5.4.3 from annotations
// in todo_bloc/test/mock/mocker.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;
import 'package:todo_bloc/core/helpers/helpers.dart' as _i3;
import 'package:todo_bloc/core/services/services.dart' as _i4;
import 'package:todo_bloc/data/data_source/data_source.dart' as _i6;
import 'package:todo_bloc/data/model/model.dart' as _i7;
import 'package:todo_bloc/domain/entity/entity.dart' as _i9;
import 'package:todo_bloc/domain/repository/repository.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponser_1<T> extends _i1.SmartFake implements _i3.Responser<T> {
  _FakeResponser_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HiveService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveService extends _i1.Mock implements _i4.HiveService {
  MockHiveService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> openBox() => (super.noSuchMethod(
        Invocation.method(
          #openBox,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> put(Map<String, dynamic>? data) => (super.noSuchMethod(
        Invocation.method(
          #put,
          [data],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<Map<String, dynamic>> get(String? key) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<List<Map<String, dynamic>>> getAll(List<String>? keys) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [keys],
        ),
        returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i5.Future<List<Map<String, dynamic>>>);

  @override
  _i5.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteAll(List<String>? keys) => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [keys],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [SqfliteService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSqfliteService extends _i1.Mock implements _i4.SqfliteService {
  MockSqfliteService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i5.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#database),
        )),
      ) as _i5.Future<_i2.Database>);

  @override
  _i5.Future<int> insert(
    Map<String, dynamic>? data, {
    String? tableName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [data],
          {#tableName: tableName},
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<List<Map<String, dynamic>>> getAll({String? tableName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
          {#tableName: tableName},
        ),
        returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i5.Future<List<Map<String, dynamic>>>);

  @override
  _i5.Future<List<Map<String, dynamic>>> getAllByFilter({
    required String? where,
    required List<dynamic>? equalsTo,
    String? tableName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllByFilter,
          [],
          {
            #where: where,
            #equalsTo: equalsTo,
            #tableName: tableName,
          },
        ),
        returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i5.Future<List<Map<String, dynamic>>>);

  @override
  _i5.Future<Map<String, dynamic>?> getById(
    int? id, {
    String? tableName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
          {#tableName: tableName},
        ),
        returnValue: _i5.Future<Map<String, dynamic>?>.value(),
      ) as _i5.Future<Map<String, dynamic>?>);

  @override
  _i5.Future<int> updateById(
    int? id,
    Map<String, dynamic>? data, {
    String? tableName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateById,
          [
            id,
            data,
          ],
          {#tableName: tableName},
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> delete(
    int? id, {
    String? tableName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
          {#tableName: tableName},
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
}

/// A class which mocks [TodoDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoDataSource extends _i1.Mock implements _i6.TodoDataSource {
  MockTodoDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Responser<_i7.TodoModel?>> getTodo(int? i) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodo,
          [i],
        ),
        returnValue: _i5.Future<_i3.Responser<_i7.TodoModel?>>.value(
            _FakeResponser_1<_i7.TodoModel?>(
          this,
          Invocation.method(
            #getTodo,
            [i],
          ),
        )),
      ) as _i5.Future<_i3.Responser<_i7.TodoModel?>>);

  @override
  _i5.Future<_i3.Responser<List<_i7.TodoModel>?>> getAllTodo() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTodo,
          [],
        ),
        returnValue: _i5.Future<_i3.Responser<List<_i7.TodoModel>?>>.value(
            _FakeResponser_1<List<_i7.TodoModel>?>(
          this,
          Invocation.method(
            #getAllTodo,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Responser<List<_i7.TodoModel>?>>);

  @override
  _i5.Future<_i3.Responser<_i7.TodoModel?>> setTodo(_i7.TodoModel? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #setTodo,
          [todo],
        ),
        returnValue: _i5.Future<_i3.Responser<_i7.TodoModel?>>.value(
            _FakeResponser_1<_i7.TodoModel?>(
          this,
          Invocation.method(
            #setTodo,
            [todo],
          ),
        )),
      ) as _i5.Future<_i3.Responser<_i7.TodoModel?>>);
}

/// A class which mocks [TodoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRepository extends _i1.Mock implements _i8.TodoRepository {
  MockTodoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Responser<_i9.TodoEntity?>> getTodo(int? i) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodo,
          [i],
        ),
        returnValue: _i5.Future<_i3.Responser<_i9.TodoEntity?>>.value(
            _FakeResponser_1<_i9.TodoEntity?>(
          this,
          Invocation.method(
            #getTodo,
            [i],
          ),
        )),
      ) as _i5.Future<_i3.Responser<_i9.TodoEntity?>>);

  @override
  _i5.Future<_i3.Responser<List<_i9.TodoEntity>?>> getAllTodo() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTodo,
          [],
        ),
        returnValue: _i5.Future<_i3.Responser<List<_i9.TodoEntity>?>>.value(
            _FakeResponser_1<List<_i9.TodoEntity>?>(
          this,
          Invocation.method(
            #getAllTodo,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Responser<List<_i9.TodoEntity>?>>);

  @override
  _i5.Future<_i3.Responser<_i9.TodoEntity?>> setTodo(_i9.TodoEntity? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #setTodo,
          [todo],
        ),
        returnValue: _i5.Future<_i3.Responser<_i9.TodoEntity?>>.value(
            _FakeResponser_1<_i9.TodoEntity?>(
          this,
          Invocation.method(
            #setTodo,
            [todo],
          ),
        )),
      ) as _i5.Future<_i3.Responser<_i9.TodoEntity?>>);
}
